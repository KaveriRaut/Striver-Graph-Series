
//Disjoint set ki class

//------------------------------Disjoint Set data structure------------------------------------------------------
class Disjoint_set
{
private:
    vector<int> Rank;
    vector<int> Parent;
    vector<int> Size;

public:
    // constructor
    Disjoint_set(int n)
    {
        // initialization with 0 and size for 1-based indexing n+1
        Rank.resize(n + 1, 0); // rank are 0 initially
        Parent.resize(n + 1);  // parent are them-salves at initially
        Size.resize(n + 1);    // size is 1 initially for all
        for (int i = 0; i < n + 1; i++)
        {
            Parent[i] = i;
            Size[i] = 1;
        }
    }
    // get ultimate parent function => using DP concept with Path Compression logic
    int findUltParent(int node)
    {
        // base case
        if (node == Parent[node]) // node is itself is ultimate parent of self=>got ultiParent
        {
            return node;
        }
        // else while return just store the Parent[node] ka ultimate parent and return
        return Parent[node] = findUltParent(Parent[node]); // this is DP approach of storing the values while returning to use them in future
    }

    // to make the union of nodes u & v BY Rank
    void unionByRank(int u, int v)
    {
        // 1.get the ultimate parent of both u and v
        int ult_Parent_u = findUltParent(u);
        int ult_Parent_v = findUltParent(v);
        // if ultimate parent of both are same => dont do anything and return
        if (ult_Parent_u == ult_Parent_v)
        {
             return;
        }

        // 2.now get the Ranks of the corresponding ultimate parents
        // Rank[ult_Parent_u] // this is rank of ult_parent of u
        // Rank[ult_Parent_v] // this is rank of ult_parent of v

        // 3.now attach ult_Parent of the smaller rank to larger rank
        if (Rank[ult_Parent_u] < Rank[ult_Parent_v])
        {
            Parent[ult_Parent_u] = ult_Parent_v;
        }
        else if (Rank[ult_Parent_v] < Rank[ult_Parent_u])
        {
            Parent[ult_Parent_v] = ult_Parent_u;
        }
        else // if both ranks are same, attach in any way but=> larger rank ult_Parent ka rank will increase by 1
        {
            Parent[ult_Parent_u] = ult_Parent_v;
            Rank[ult_Parent_v]++; // as here we attach the ultP of u to v=>so rank of larger v will increase
        }
    }

    // union of nodes u & v BY Size
    void unionBySize(int u, int v)
    {
        // 1.get the ultimate parents
        int ult_Parent_u = findUltParent(u);
        int ult_Parent_v = findUltParent(v);
         // if ultimate parent of both are same => dont do anything and return
        if (ult_Parent_u == ult_Parent_v)
        {
            return;
        }
        
        // 2.now get the Size of both ult_Parents and then
        // 3. attach smaller size to larger size ult_parent =>larger ki size will increase by size of smaller in any case
        if (Size[ult_Parent_u] < Size[ult_Parent_v])
        {
            Parent[ult_Parent_u] = ult_Parent_v;
            Size[ult_Parent_v] += Size[ult_Parent_u];
        }
        else
        {
            Parent[ult_Parent_v] = ult_Parent_u;
            Size[ult_Parent_u] += Size[ult_Parent_v];
        }
    }
};

//------------------------------Kruskal's Algorithm------------------------------------------------------

//Time : O(ElogE) + O(E*4alpha) => for sorting + disjoint_set
//Space : O(E+V) => for vectors like Rank, Size, edges
//Algorithm => Kruskals algorithm to find MST using Disjoint_Set Data structure

class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[]) //graph stores [u] = [v,wt]
    {
        //1. create edges[] ka vector which stores pair <wt,<u,v>> using the given adjList graph
        vector<pair<int,pair<int,int>>> edges; //stores <wt,<u,v>>
        for(int i=0;i<V;i++)//graph stores [i] = [v,wt]
        {
            for(auto it:adj[i])
            {
                int node = i;
                int adjNode = it[0];
                int wt = it[1];
                edges.push_back({wt,{node,adjNode}});
            }
        }
        //2. use the disjoint_set to implement the kruskal algorithm
        Disjoint_set ds(V);
        //3.now sort all the edges in ascending order by weights
        sort(edges.begin(), edges.end());
        int mst_wt = 0; //to find the total weight of MST
        //4. now iterate over all the edges and apply kruskal algorithm
        for(auto it:edges) //edges stores <wt,<u,v>>
        {
            int wt = it.first;
            int u = it.second.first;
            int v = it.second.second;
            //if (u,v) both has same ultimate parent => means belong to same component so dont add it in MST
            //else if (u,v) both dont have same ultimate parent => means belong to diff. component so add in MST
            if(ds.findUltParent(u) != ds.findUltParent(v)) //ultiParent are different=>add in MST by calling union function
            {
                mst_wt += wt;
                ds.unionBySize(u,v);
            }
        }
        //5. at end return the mst_wt 
        return mst_wt;
    }
};
