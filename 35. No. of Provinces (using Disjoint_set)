
class Disjoint_set
{
public:
    vector<int> Parent;
    vector<int> Size;


    // constructor
    Disjoint_set(int n)
    {
        // initialization with 0 and size for 1-based indexing n+1
        Parent.resize(n + 1);  // parent are them-salves at initially
        Size.resize(n + 1);    // size is 1 initially for all
        for (int i = 0; i < n + 1; i++)
        {
            Parent[i] = i;
            Size[i] = 1;
        }
    }
    // get ultimate parent function => using DP concept with Path Compression logic
    int findUltParent(int node)
    {
        // base case
        if (node == Parent[node]) // node is itself is ultimate parent of self=>got ultiParent
        {
            return node;
        }
        // else while return just store the Parent[node] ka ultimate parent and return
        return Parent[node] = findUltParent(Parent[node]); // this is DP approach of storing the values while returning to use them in future
    }

    // union of nodes u & v BY Size
    void unionBySize(int u, int v)
    {
        // 1.get the ultimate parents
        int ult_Parent_u = findUltParent(u);
        int ult_Parent_v = findUltParent(v);
         // if ultimate parent of both are same => dont do anything and return
        if (ult_Parent_u == ult_Parent_v)
        {
            return;
        }
        
        // 2.now get the Size of both ult_Parents and then
        // 3. attach smaller size to larger size ult_parent =>larger ki size will increase by size of smaller in any case
        if (Size[ult_Parent_u] < Size[ult_Parent_v])
        {
            Parent[ult_Parent_u] = ult_Parent_v;
            Size[ult_Parent_v] += Size[ult_Parent_u];
        }
        else
        {
            Parent[ult_Parent_v] = ult_Parent_u;
            Size[ult_Parent_u] += Size[ult_Parent_v];
        }
    }
};

// Main class with function to find the no. of provinces

class Solution {
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        //1.store the edges that exists into edges vector
        vector<pair<int,int>> edges;
        for(int i=0;i<V;i++)
        {
            for(int j=0;j<V;j++)
            {
                //if edge exists => add it to edges vector
                if(adj[i][j]==1)
                {
                    edges.push_back({i,j});
                }
            }
        }
        //2.now iterate over all the edges and use Disjoint_set to create the components
        Disjoint_set ds(V);
        for(auto it:edges)
        {
            int u = it.first;
            int v = it.second;
            ds.unionBySize(u,v);
        }
        //3.at end iterate over the Parent arr[] and find the unique no. of ulti_parent
        int count=0;
        for(int i=0;i<V;i++)
        {
            if(ds.Parent[i]==i)
            {
                count++;
            }
        }
        return count;
    }
};
