
// SpaceComplexity : O(N)
// Time Complexity : O(V+2E)

class Solution {
private:
    bool BFS_is_cycle(int i, vector<int> adj[], int visited[] )
    {
        //0-based indexing so take 0-as start node
        queue<pair<int,int>>q; //queue {currNode, parentNode}
        visited[i]=1; //mark starting node 0 as visited
        q.push({i,-1}); 
        
        while(!q.empty())
        {
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            //check all its neighbours from adjlist
            for(int x:adj[node])
            {
                //if neighbour is not visited yet and it is not parentNode then mark visited and push into queue
                if(!visited[x])
                {
                    visited[x]=1;
                    q.push({x,node}); //here {currNode=x,parentNode=node}
                }
                //else if it is already visited and it is not a parentNode => means we got cycle so return true
                else 
                {
                    if(x!=parent) //already visited but not the parent
                    {
                        return true; //got the cycle
                    }
                }
            }
        }
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        //visited array
        int visited[V]={0};
        //for connected component graph 
        //find the unvisited start node which shows the seperate component of grapf
        for(int i=0;i<V;i++)
        {
            if(!visited[i])
            {
                if(BFS_is_cycle(i,adj,visited)==true)
                    return true;
            }
        }
        return false;
    }
};
