
//Space : O(N)
//Time : O(N)+O(2E)

class Solution {
private:
    bool DFS(int node, int visited[], vector<int> adj[], int currColor)
    {
        //mark current node as colored and visited with given currColor
        visited[node]=currColor;
        //now check all its neighbours with conditions
        for(int x:adj[node])
        {
            if(visited[x]==-1) //if neighbour still not colored
            {
                if(DFS(x,visited,adj,!currColor)==false)
                {
                    return false;
                }
            }
            else if(visited[x]==currColor) //if neighbour is already colored but with same color => not bipartite graph
            {
                return false;
            }
        }
        return true;
    }
public:
	bool isBipartite(int V, vector<int>adj[]){
	    //initialize and maintain visited color arrat
	    int visited[V];
	    for(int i=0;i<V;i++)
	    {
	        visited[i]=-1;
	    }
	    //now for connected components check all nodes
	    for(int i=0;i<V;i++)
	    {
	        if(visited[i]==-1) //if start node not colored means call for DFS on that component
	        {
	            if(DFS(i,visited,adj,0)==false) //if any of component return false =>> futher calls not made
	            {
	                return false;
	            }
	        }
	    }
	    return true;
	}

};
