#include <iostream>
#include <vector>
using namespace std;

int main()
{
    //----------------------Adjacency Matrix Representation----------------------------//

    int n; // no. of vertices
    int m; // no. of edges
    cout << "Enter the number of vertices and edges" << endl;
    cin >> n >> m;
    // adjacency matrix representation of graph
    int matrix[n + 1][n + 1] = {0};
    // input for m undirected edges
    for (int i = 0; i < m; i++)
    {
        cout << "Enter the nodes of current edge" << endl;
        int src, dest;
        cin >> src >> dest;
        matrix[src][dest] = 1;
        matrix[dest][src] = 1;
    }
    // displaying adj. matrix Graph
    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < n + 1; j++)
        {
            cout << matrix[i][j] << " ";
        }
        cout << endl;
    }

    //----------------------Adjacency list Representation----------------------------//
    
    int n;
    int m;
    cout << "Enter the number of vertices and edges" << endl;
    cin >> n >> m;
    vector<int> adjlist[n + 1]; // array storing vectors at each index
    for (int i = 0; i < m; i++)
    {
        cout << "Enter the nodes of current edge" << endl;
        int a, b;
        cin >> a >> b;
        // as undirected=> for 1 edge make both direction entries
        adjlist[a].push_back(b);
        adjlist[b].push_back(a);
    }
    for (int i = 1; i < n + 1; i++)
    {
        cout << i << ":";
        for (auto x : adjlist[i])
        {
            cout << x << " ";
        }
        cout << endl;
    }
    return 0;
}
