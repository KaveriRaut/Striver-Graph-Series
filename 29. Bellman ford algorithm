
//Time : O(V*E)
//Space : O(V)

class Solution {
  public:
    vector<int> bellman_ford(int n, vector<vector<int>>& edges, int src) {
        
        vector<int> distArr(n,1e8); //maintain distArr initialize with 1e9 distance
        distArr[src]=0; //initially put src distance =0
        
        //now make (n-1)th iterations of relaxation for all given edges {u,v,wt}
        for(int i=0;i<n-1;i++)
        {
            for(auto it:edges)
            {
                int u = it[0];
                int v = it[1];
                int edgeWT = it[2];
                //checking relaxation condition  (distArr[u]+edgeWT<distArr[v])
                if(distArr[u]!=1e9 && (distArr[u]+edgeWT<distArr[v]))
                {
                    distArr[v] = distArr[u]+edgeWT;
                }
            }
        }
        
        //now to check if negative cycle exists or not
        // doing the relaxation for nth time => if distArr gets updates means negative cycle exists
        for(auto it:edges)
        {
            int u = it[0];
            int v = it[1];
            int edgeWT = it[2];
            //checking relaxation condition  (distArr[u]+edgeWT<distArr[v])
            if(distArr[u]!=1e9 && (distArr[u]+edgeWT<distArr[v]))
            {
                return {-1}; //return array of all {-1}
            }
        }
        
        return distArr;
    }
};


