***** for undirected graph ******
Space Complexity : O(N)+O(N) => for queue + visited array
Time Complexity : O(N)+O(2E) => queue travesal + each node has 2E neighbours

#include <bits/stdc++.h>
using namespace std;

class Solution {
  
  public:
    // Function to return Breadth First Traversal of given graph.
    
    vector<int> bfsOfGraph(int v, vector<int> adj[]) {
        queue<int> q;
        int vis[v]={0};
        vector<int> bfs; //to store bfs final traversal
        
        vis[0]=1;
        q.push(0);
        while(!q.empty())
        {
            int currNode = q.front();
            q.pop();
            bfs.push_back(currNode);
            
            for(int x:adj[currNode]) //check on neighbour
            {
                if(!vis[x]) //if neighbour not visited
                {
                    vis[x]=1; //mark as visited
                    q.push(x); //push into queue
                }
            }
        }
        return bfs;
    }
};
