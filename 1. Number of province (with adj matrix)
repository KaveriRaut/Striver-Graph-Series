  Space Complexity => O(N) + O(N) => visitedArr + rec. calls stack 
  Time Complexity => O(V) * O(V)=> O(V^2) => dfs Call For each V nodes * check for all its vertices is there edges or not
 


class Solution {
 private:
        void dfs(int currNode,vector<vector<int>> adj,int visited[], int V)
        {
            visited[currNode]=1;
            
            for(int i=0;i<V;i++) //check for currNode ke neighbours=>if not visited call dfs on them
            {
                if(adj[currNode][i]==1 && adj[i][currNode]==1) //both way possible edge necessary
                {
                    if(!visited[i])
                    {
                        dfs(i,adj,visited,V);
                    }
                }
            }
        }
  public:
  
    int numProvinces(vector<vector<int>> adj, int V) {
        
        //now find unvisited nodes as new startNode for dfs call means we found the new province
        int visited[V]={0};
        int count=0;
        for(int i=0;i<V;i++)
        {
            if(!visited[i]) //if not visited means [i] is new startNode of new Province
            {
                count++;
                dfs(i,adj,visited,V);
            }
        }
        return count;
    }
};
