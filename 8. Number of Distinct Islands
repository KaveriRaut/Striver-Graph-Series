
//Space Complexity : O(n*m)
//Time Complexity : O(n*m*4) + O(n*m*log(n*m))

class Solution {
private: 
    void DFS(int row, int col, vector<vector<int>> &visited, vector<vector<int>>& grid, vector<pair<int,int>> &vec, int baseRow, int baseCol)
    {
        int n=grid.size();
        int m=grid[0].size();
        //1. mark land as visited
        visited[row][col]=1;
        //2. push the modified co-ordinates into shape vector of current island means by subtracting the base co-ordinates
        vec.push_back({row-baseRow, col-baseCol}); //***imp step for shape storing in vector and set
        //3. now check all 4neighbour lands of curr Land
        int drow[]={-1,0,+1,0};
        int dcol[]={0,+1,0,-1};
        for(int i=0;i<4;i++)
        {
            int newRow=row+drow[i];
            int newCol=col+dcol[i];
            //checking the validity boundry condition && not visisted && it is land part
            if(newRow>=0 && newRow<n && newCol>=0 && newCol<m && !visited[newRow][newCol] && grid[newRow][newCol]==1)
            {
                DFS(newRow,newCol,visited,grid,vec,baseRow,baseCol); //base co-ordinates remain same for same component island
            }
        }
    }
public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        //1. maintain visited matrix
        vector<vector<int>> visited (n, vector<int>(m,0));
        //2. maintain the Set(of vector of pair) to store the unique shape of islands
        set<vector<pair<int,int>>> st;
        //3. traverse the grid to find the land so to call DFS on each connected component
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!visited[i][j] && grid[i][j]==1) //if got land that is not visited yet => just call DFS
                {
                    vector<pair<int,int>> vec; //vector to store the shape of current island
                    DFS(i,j,visited,grid,vec,i,j); //for first time calling so pass (i,j) as base co-ordinates
                    st.insert(vec); //at end of each island traverse=>store its shape vector into set
                }
            }
        }
        //set store only unique island count
        return st.size();
    }
};

