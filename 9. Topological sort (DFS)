
//Space Complexity : O(2N) + O(N) 
//Time Complexity : O(V+E)+O(V)

class Solution
{
    private:
    void DFS(int node,int visited[],vector<int> adj[],stack<int>&st)
    {
        //mark the node as visited
        visited[node]=1;
        //now check if its neighbours exist from adjlist and call rec_DFS on them
        for(int x:adj[node])
        {
            if(!visited[x]) //if neighbour is not visited=>then call DFS on it
            {
                DFS(x,visited,adj,st);
            }
        }
        //if no futher neighbour exists means call is over for current node=>push it into stack
        st.push(node);
    }
    
	public:
  
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    //1.maintain stack to store the toposort
	    stack<int> st;
	    //2.maintain the visited array
	    int visited[V] = {0};
	    //3.traverse for all the connected components in given graph
	    for(int i=0;i<V;i++)
	    {
	        //if node is not visited that means got new component with new startNode=>call DFS
	        if(!visited[i]) 
	        {
	            DFS(i,visited,adj,st);
	        }
	    }
	    //4.got the stack containing of toposort order=>copy it in vector and return that vector
	    vector<int> vec;
	    while(!st.empty())
	    {
	        int val=st.top();
	        st.pop();
	        vec.push_back(val);
	    }
	    return vec;
	}
};
