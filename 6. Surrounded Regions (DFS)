
//Space Complexity : O(n*m)
// Time Complexity : O(n*m)

class Solution{
private:
    void dfs(int row, int col, vector<vector<int>> &visited, vector<vector<char>> &mat)
    {
        int n=mat.size();
        int m=mat[0].size();
        //mark boundry node as visited
        visited[row][col]=1;
        //now call dfs on all 4 neighbours connected to given boundry 'O'
        int drow[] = {-1, 0, +1, 0};
        int dcol[] = {0, +1, 0, -1};
        for(int i=0;i<4;i++)
        {
            int newRow = row+drow[i];
            int newCol = col+dcol[i];
            //check all validity conditions && must unvisited && itmust be 'O'
            if(newRow>=0 && newRow<n && newCol>=0 && newCol<m && !visited[newRow][newCol] && mat[newRow][newCol]=='O')
            {
                dfs(newRow,newCol,visited,mat);
            }
        }
    }
public:
    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        //1. visited matrix initialized with 0
        vector<vector<int>> visited (n, vector<int>(m,0));
        
        //2. traversing all boundries of given matrix
        
        //Traversing boundry rows => then calling DFS on 'O' found in boundry
        for(int j=0;j<m;j++)
        {
            //traversing 1st row
            if(!visited[0][j] && mat[0][j]=='O')
            {
                dfs(0,j,visited,mat);
            }
            //Traversing the last (n-1)th Row
            if(!visited[n-1][j] && mat[n-1][j]=='O')
            {
                dfs(n-1,j,visited,mat);
            }
        }
        //Traversing the boundry Columns => then calling DFS on 'O' found in boundry
        for(int i=0;i<n;i++)
        {
            //traversing the 1st Column
            if(!visited[i][0] && mat[i][0]=='O')
            {
                dfs(i,0,visited,mat);
            }
            //traversing the last (m-1)th Column
            if(!visited[i][m-1] && mat[i][m-1]=='O')
            {
                dfs(i,m-1,visited,mat);
            }
        }
        
        //3. Now find the untouched unvisited 'O' from matrix and flip them to 'X'
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(!visited[i][j] && mat[i][j]=='O') //remain 'O' that are not boundry touched and not visited
                {
                    mat[i][j]='X'; //those are flipped to 'X'
                }
            }
        }
        return mat;
    }
};
