
//space : O(2V)
//Time : O(V+E)

class Solution {
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        
        //using Kahn's InDegree Algorithm to find Toposort of given graph
        vector<int> toposort_vec;
	    //make indegre array
	    int inDegree[V] = {0} ;
	    //traverse the given graph and accordingly fill the inDegree array
	    for(int i=0;i<V;i++)
	    {
	        for(int x:adj[i]) //neighbours of (i)th node
	        {
	            inDegree[x]++; //neighbour ki inDegree increase by 1
	        }
	    }
	    
	    //queue required for BFS
	    queue<int> q;
	    //now BFS start with nodes with inDegree 0
	    for(int i=0;i<V;i++)
	    {
	        if(inDegree[i]==0)
	        {
	            q.push(i);
	        }
	    }
	    //processing the nodes in queue as per InDegree array
	    while(!q.empty())
	    {
	        int currNode=q.front();
	        q.pop();
	        toposort_vec.push_back(currNode); //store the currNode into toposort vector
	        //now check all neighbours of currNode
	        for(int x:adj[currNode])
	        {
	            inDegree[x]--;//now decrement inDegree of all neighbours of currNode by 1
	            if(inDegree[x]==0) //and if now inDegree become 0=>push it into queue
	            {
	                q.push(x);
	            }
	        }
	    }
	    
	    //at last checking the size of toposrt formed
	    if(toposort_vec.size()==V) //if toposort contain all (V) nodes => means graph is DAG => No Cycle
	    {
	        return false;
	    }
	    else //if toposort do not contain all V nodes in it ==> means graph has cycle
	    {
	        return true;
	    }
	    
    }
};
